""" 
Function to calculate roughness(Ra) of a square region
Inputs- (x,y) coordinate the center of square and L, side length of square, in micrometer. 

Machine-learning algorithm in util/shape_recogniser will give the function the center of the Cu connections for input. 
Side length of square will be set by user

From https://www.olympus-ims.com/en/metrology/surface-roughness-measurement-portal/parameters/#!cms[focus]=007, 
Roughness Average (Ra) is given by average of absolute values of deviation from the mean of a given sample. 
In Numpy's terminology it's Mean Absolute Deviation from mean (https://www.geeksforgeeks.org/absolute-deviation-and-absolute-mean-deviation-using-numpy-python/)
"""

import openpyxl
from openpyxl.utils import get_column_letter
import os

from numpy import mean, absolute
from matplotlib.patches import Rectangle
import matplotlib.pyplot as plt
from datetime import datetime
import pytz

tz_SG = pytz.timezone('Asia/Singapore') 
datetime_SG = datetime.now(tz_SG)
#For saving files with timestamps 
format_timestring = datetime_SG.strftime("%m%d%Y%H%M")

def find_ra(array, detected_circles, exclude, cwinsize, polwinsize, scan_size, scan_pixels_len):
    """ 
    Returns average roughness of region of copper contact centered at (x,y), 
    with default side length of region = 13 pixels = 1.016 micrometer for copper,
    and 25 pixels for polymer, 
    so that the region extends 6 pixels/12 pixels in each direction from the center piece. 
    Side lengths are customizable, stored in variables cwinsize and polwinsize. 
    
    Coordinates in numpy array generated by pySPM matches orientation of image generated
    
    For calculation of polymer roughness, assumed that diamerter:pitch ratio at least 1:2. We'll find 
    roughness of polymer vector (r,r) away from each center of circle
    """
    #Counter for sum of ra across all detected contacts
    total_ra=0
    pol_total_ra =0
    circles_count=0
    pol_area_count =0
    take_bottom_left = False
    #Using string to store as list gives some problem with formating decimals
    cu_ra_list=""
    pol_ra_list =""
    #Allows users to exclude certain circles identified by inputing exclude list
    for i in [x for x in range(len(detected_circles[0, :])) if x+1 not in exclude]:
        
        pt = detected_circles[0,i]
        circles_count+=1
        
        x,y, r = int(pt[0]*scan_pixels_len/768), int(pt[1]*scan_pixels_len/768), int(pt[2]*scan_pixels_len/768)
        half_window_size_pix = int(scan_pixels_len*(0.5)*cwinsize/scan_size)
    
        
        #Define sample area to calculate roughness 
        #used min, max in case selected center is too close to the borders
        #TODO: Record in doc coordinate system 
        sample = array[max(0, y-half_window_size_pix): min(scan_pixels_len, y+half_window_size_pix+1), max(0,x-half_window_size_pix):min(scan_pixels_len, x+half_window_size_pix+1)]
        #Uncomment to show area used
        # array[max(0, y-half_window_size_pix): min(scan_pixels_len, y+half_window_size_pix+1), max(0,x-half_window_size_pix):min(scan_pixels_len, x+half_window_size_pix+1)] =0
        # plt.imshow(array, cmap="copper")
        # plt.show()
        #print(mean(absolute(sample - mean(sample))))
        cu_ra_list+=str("{:.3f}".format(mean(absolute(sample - mean(sample)))))+"/"
        total_ra+=mean(absolute(sample - mean(sample)))
        
        #Polymer roughness 
        x_pol = x+2*r
        y_pol = y-2*r
        half_pol_win_size_pix  = int(scan_pixels_len*(0.5)*polwinsize/scan_size)
        #Check at least a portion of sample area is in range
        if(y_pol>0 and x_pol<scan_pixels_len):
            pol_sample = array[max((y_pol)-half_pol_win_size_pix,0):min((y_pol)+half_pol_win_size_pix+1, scan_pixels_len), max(x_pol-half_pol_win_size_pix,0):min(x_pol+half_pol_win_size_pix+1, scan_pixels_len)] 
            pol_total_ra +=mean(absolute(pol_sample - mean(pol_sample)))
            pol_area_count+=1
            pol_ra_list+=str("{:.3f}".format(mean(absolute(pol_sample - mean(pol_sample)))))+"/"
            
        
    if(circles_count==0):
        copper_ra = -1
    else:
        copper_ra = total_ra/circles_count

    if(pol_area_count==0):
        for i in [x for x in range(len(detected_circles[0, :])) if x+1 not in exclude]:
        
            pt = detected_circles[0,i]
            x,y, r = int(pt[0]*scan_pixels_len/768), int(pt[1]*scan_pixels_len/768), int(pt[2]*scan_pixels_len/768)
            #Polymer roughness 
            x_pol = x-2*r
            y_pol = y+2*r
            #If all polymer area out of bound, try take bottom left of each circle
            if(y_pol<scan_pixels_len and x_pol>0):
                pol_sample = array[max((y_pol)-half_pol_win_size_pix,0):min((y_pol)+half_pol_win_size_pix+1, scan_pixels_len), max(x_pol-half_pol_win_size_pix,0):min(x_pol+half_pol_win_size_pix+1, scan_pixels_len)] 
                pol_total_ra +=mean(absolute(pol_sample - mean(pol_sample)))
                pol_ra_list+= "{:.3f}".format(mean(absolute(pol_sample - mean(pol_sample))))+"/"
                pol_area_count+=1
        if (pol_area_count==0):
            pol_ra = "Errored: Please calculate polymer roughness manually."
        else:
            pol_ra = pol_total_ra/pol_area_count
            take_bottom_left = True
    else:
        pol_ra = pol_total_ra/pol_area_count
        
    #print([copper_ra, pol_ra])
        
    return copper_ra, pol_ra, take_bottom_left, cu_ra_list, pol_ra_list

def insert_ra(excel_file_path, ra, pol_ra, col_num, cu_ra_list, pol_ra_list):
    wb = openpyxl.load_workbook(excel_file_path)
    ws = wb["Sheet"]
    
    col_letter = get_column_letter(col_num+1)
    try:
        ws[col_letter+'7'] = "{:.3f}".format(ra)
        ws[col_letter+'8'] = "{:.3f}".format(pol_ra)
        ws[col_letter+'13'] = cu_ra_list
        ws[col_letter+'14'] = pol_ra_list
    except ValueError:
        ws[col_letter+'7'] = ra
        ws[col_letter+'8'] = pol_ra
    wb.save(excel_file_path)
    
    return 0
    


def insert_ref_image(filename_formatted, excel_file_path, col_num):
    
    img_path  =  "../results/ref_regions_imgs/"+str(filename_formatted)+"ref_plot.png"
    wb = openpyxl.load_workbook(excel_file_path)
    ws = wb["Sheet"]
    
    col_letter = get_column_letter(col_num+1)
    
    line_img = openpyxl.drawing.image.Image(img_path)
    line_img.height = 140
    line_img.width = 140
    
    line_img.anchor = col_letter + '12'
    ws.add_image(line_img)
    
    wb.save(excel_file_path)